# Copyright (C) 2021 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# siehe app.module.ts

schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Bücherdaten zu lesen"
type Query {
  filme(suchkriterien: SuchkriterienInput): [Film!]

  film(id: ID!): Film
}

"Funktionen, um Bücher neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: FilmInput!): CreatePayload

  update(input: FilmUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, wenn z.B. der Login-Zeitpunkt im IDM-System gespeichert wird
  login(username: String!, password: String!): LoginResult
  refresh(refresh_token: String!): LoginResult
}

"Daten zum Distributors eines Filmes"
type Distributor {
  name: String!
  umsatz: Double
  homepage: String
}

"Daten zum Schauspieler eines Filmes"
type Schauspieler {
  name: String!
  geburtsdatum: String
}

"Datenschema zu einem Buch, das gelesen wird"
type Film {
  # ID ist bei Apollo ein String
  id: Int!
  version: Int!
  imdbId: String!
  laenge: Int
  rating: Int
  art: Art
  preis: Float!
  streambar: Boolean
  datum: String
  schlagwoerter: [String]
  # 1:1-Beziehung
  distributor: Distributor!
  # field mit @ResolveField
  rabatt(short: Boolean): String!
}

"Enum-Typ für die Art eines Buches"
enum Art {
  DRUCKAUSGABE
  KINDLE
}

"Suchkriterien für Bücher"
input SuchkriterienInput {
  name: String
  imdbId: String
  rating: Int
  art: Art
  streambar: Boolean
}

"Daten zum Titel eines neuen Buches"
input DistributorInput {
  name: String!
  umsatz: double
  homepage: String
}

"Daten zu den Abbildungen eines Buches"
input SchauspielerInput {
  name: String!
  geburtsdatum: String!
}

"Daten für ein neues Buch"
input FilmInput {
  imdbId: String
  laenge: Int
  rating: Int
  art: Art
  preis: Float
  rabatt: Float
  streambar: Boolean
  datum: String
  schlagwoerter: [String]
  distributor: DistributorInput!
  schauspieler: [SchauspielerInput!]
}

type CreatePayload {
  id: Int
}

"Daten für ein zu änderndes Buch"
input FilmUpdateInput {
  id: ID
  version: Int
  imdbId: String
  laenge: Int
  rating: Int
  art: Art
  preis: Float
  rabatt: Float
  streambar: Boolean
  datum: String
  schlagwoerter: [String]
}

type UpdatePayload {
  version: Int
}

type LoginResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
  roles: [String!]
}
