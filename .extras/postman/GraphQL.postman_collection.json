{
	"info": {
		"_postman_id": "ee3cfd4a-c845-42c0-9b3c-6a07b3780f20",
		"name": "GraphQL",
		"description": "GraphQL-Schnittstelle",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30249920",
		"_collection_link": "https://speeding-spaceship-802758.postman.co/workspace/Film~a86e3120-d93f-40b2-8697-07be6175b51c/collection/30249920-ee3cfd4a-c845-42c0-9b3c-6a07b3780f20?action=share&source=collection_link&creator=30249920"
	},
	"item": [
		{
			"name": "Query",
			"item": [
				{
					"name": "Suche Film mit ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { film } = body.data;\r",
									"    const { version, titel, laenge, rating, filmart, preis, streambar, erscheinungsdatum, schlagwoerter, distributor, rabatt } = film;\r",
									"    pm.expect(version).to.be.a('number').that.is.gte(0);\r",
									"    pm.expect(titel).to.be.a('string');\r",
									"    pm.expect(laenge).to.be.a('number').that.is.gt(0);\r",
									"    pm.expect(rating).to.be.a('number').that.is.gte(0);\r",
									"    pm.expect(filmart).to.be.a('string');\r",
									"    pm.expect(preis).to.be.a('number').that.is.gte(0);\r",
									"    pm.expect(streambar).to.be.a('boolean');\r",
									"    pm.expect(erscheinungsdatum).to.be.a('string');\r",
									"    pm.expect(schlagwoerter).to.be.an('array');\r",
									"    pm.expect(distributor.name).to.be.a('string');\r",
									"    pm.expect(rabatt).to.match(/ %$/u);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($id: ID! = \"1\") {\r\n  film(id: $id) {\r\n    version\r\n    titel\r\n    laenge\r\n    rating\r\n    filmart\r\n    preis\r\n    streambar\r\n    erscheinungsdatum\r\n    schlagwoerter\r\n    distributor {\r\n      name\r\n    }\r\n    rabatt(short: true)\r\n    schauspielerListe {\r\n        name\r\n        geburtsdatum\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"id\": \"1\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche id, version, titel , art und distributor von allen Filmen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.forEach(film => {\r",
									"        const { id, version, filmart, titel, distributor } = film;\r",
									"        pm.expect(id).to.be.a('number').that.is.gte(0);\r",
									"        pm.expect(version).to.be.a('number').that.is.gte(0);\r",
									"        pm.expect(filmart).to.be.a('string');\r",
									"        pm.expect(titel).to.be.a('string');\r",
									"        pm.expect(distributor.name).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  filme {\r\n    id\r\n    version\r\n    titel\r\n    filmart\r\n    distributor {\r\n      name\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche art von Filmen mit Distributor WarnerBros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit filmart', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.map(film => film.filmart)\r",
									"        .forEach(filmart => pm.expect(filmart).to.be.a('string'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($name: String = \"Alpha\") {\r\n  filme(suchkriterien: {distributor: $name}) {\r\n    filmart\r\n  }\r\n}",
								"variables": "{\r\n  \"name\": \"WarnerBros\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche filmart, schlagwoerter, distributor von Filmen mit Teilstring \"ta\" im Titel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit filmart, schlagwoerter, distributor', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.forEach(film => {\r",
									"        const { filmart, schlagwoerter, distributor } = film;\r",
									"        pm.expect(filmart).to.be.a('string');\r",
									"        pm.expect(schlagwoerter).to.be.an('array');\r",
									"        pm.expect(distributor.name).to.be.a('string').that.includes('ta');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($name: String = \"ta\") {\r\n  filme(suchkriterien: {distributor: $name}) {\r\n    filmart\r\n    schlagwoerter\r\n    distributor {\r\n      name\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"name\": \"ta\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von Filmen mit nicht-vorhandenem Distributor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit errors', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string').that.includes('distributor');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('filme');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($name: String = \"Nichtvorhanden\") {\r\n  filme(suchkriterien: {distributor: $name}) {\r\n    titel\r\n  }\r\n}",
								"variables": "{\r\n  \"name\": \"Nichtvorhanden\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von Filmen mit rating 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit rating und titel', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.forEach(film => {\r",
									"        const { titel, laenge, preis, rating, distributor } = film;\r",
									"        pm.expect(titel).to.be.a('string');\r",
									"        pm.expect(laenge).to.be.a('number');\r",
									"        pm.expect(preis).to.be.a('number');\r",
									"        pm.expect(rating).to.be.a('number').that.is.eq(2);\r",
									"        pm.expect(distributor.name).to.be.a('string')\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($rating: Int = 2) {\r\n  filme(suchkriterien: {rating: $rating}) {\r\n    titel\r\n    laenge\r\n    preis\r\n    rating\r\n    distributor {\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"rating\": 2\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von Filme mit nicht-vorhandenem rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit errors', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string').that.includes('rating');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('filme');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($rating: Int = 99) {\r\n  filme(suchkriterien: {rating: $rating}) {\r\n    titel\r\n    filmart\r\n    laenge\r\n  }\r\n}",
								"variables": "{\r\n  \"rating\": 99\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von Filme mit Art ORIGINAL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit filmart und distributor', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.forEach(film => {\r",
									"        const { filmart, distributor } = film;\r",
									"        pm.expect(filmart).to.be.a('string').that.is.eq('ORIGINAL');\r",
									"        pm.expect(distributor.name).to.be.a('string').that.is.not.empty;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($filmart: Filmart = ORIGINAL) {\r\n  filme(suchkriterien: {filmart: $filmart}) {\r\n    titel\r\n    laenge\r\n    filmart\r\n    distributor {\r\n      name\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"filmart\": \"ORIGINAL\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von Filmen mit ungueltiger Art",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit errors', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { extensions } = errors[0];\r",
									"    pm.expect(extensions.code).to.be.equal('GRAPHQL_VALIDATION_FAILED');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($filmart: Filmart = \"UNGUELTIG\") {\r\n  filme(suchkriterien: {filmart: $filmart}) {\r\n    filmart\r\n  }\r\n}",
								"variables": "{\r\n  \"filmart\": \"UNGUELTIG\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche von Filmen mit streambar=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit streambar und distributor', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.forEach(film => {\r",
									"        const { titel, laenge, streambar, distributor } = film;\r",
									"        pm.expect(titel).to.be.a('string');\r",
									"        pm.expect(laenge).to.be.a('number');\r",
									"        pm.expect(streambar).to.be.true;\r",
									"        pm.expect(distributor.name).to.be.a('string').that.is.not.empty;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($streambar: Boolean = true) {\r\n  filme(suchkriterien: {streambar: $streambar}) {\r\n    titel\r\n    laenge\r\n    streambar\r\n    distributor {\r\n      name\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"streambar\": true\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Queries mit der GraphQL-Schnittstelle"
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login als admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit Token und Rollen', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { access_token, expires_in, roles } = body.data.login;\r",
									"    pm.expect(access_token).to.be.a('string').that.matches(/.+\\..+\\..+/u);\r",
									"    pm.expect(expires_in).to.be.a('number');\r",
									"    pm.expect(roles).to.be.an('array').that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    login(username: \"admin\", password: \"p\") {\r\n        access_token\r\n        expires_in\r\n        refresh_token\r\n        refresh_expires_in\r\n        roles\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    refresh(refresh_token: \"eyJhbGciOiJIUzUxMiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJmZTQ5N2U0NS1hZTE3LTQ5NWQtYTJlZi0xNjE4ZWRhZWIwYjEifQ.eyJleHAiOjE3MTQyNjY2NTAsImlhdCI6MTcxNDIzMDY1MCwianRpIjoiZjlkYjVlYzktMzEyNS00OTExLThhODYtMjE2MmRiYWVkOGFkIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9hY21lIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9hY21lIiwic3ViIjoiYjliMzA5OTUtNzhhYy00ZDJiLTk5ODAtM2NmMThiZGUyMzVjIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImZpbG0tY2xpZW50Iiwic2Vzc2lvbl9zdGF0ZSI6ImIyYjNhMjY5LWQxNjgtNDliMy05MGIyLTg3ZGM5NGU2OTBjMSIsInNjb3BlIjoicm9sZXMgZW1haWwgcHJvZmlsZSIsInNpZCI6ImIyYjNhMjY5LWQxNjgtNDliMy05MGIyLTg3ZGM5NGU2OTBjMSJ9.q1Ni8KMNraS3YmJB_2dFSmZ9FOSLCEH71oWaaZwzSSxM2b9vfARA1-xknrc4L_1XlyI-Rv4C_gJk52RsmcT36A\") {\r\n        access_token\r\n        expires_in\r\n        refresh_token\r\n        refresh_expires_in\r\n        roles\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login mit falschem Passwort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit Fehlermeldung', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const error = errors[0];\r",
									"    const { message, path, extensions } = error;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Passwort');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('login');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    login(username: \"admin\", password: \"FALSCH\") {\r\n        access_token\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Login mit der GraphQL-Schnittstelle"
		},
		{
			"name": "Mutation",
			"item": [
				{
					"name": "Neuer Film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { data } = body;\r",
									"    pm.expect(data.create.id).to.be.a('number').that.is.gte(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded',\r",
									"    },\r",
									"    body: 'username=admin&password=p',\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().access_token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  create(\r\n    input: {\r\n      titel: \"Die Verurteilten\",\r\n      laenge: 142,\r\n      rating: 5,\r\n      filmart: KINOFASSUNG,\r\n      preis: 99.99,\r\n      rabatt: 0.123,\r\n      streambar: true,\r\n      erscheinungsdatum: \"1994-01-31\",\r\n      schlagwoerter: [\"ACTION\", \"DRAMA\"],\r\n      distributor: {\r\n        name: \"CastleRockEntertainment\",\r\n        homepage: \"https://create.mutation\",\r\n        umsatz: 7330000\r\n      },\r\n      schauspielerListe: [{\r\n        name: \"Freeman\",\r\n        geburtsdatum: \"1937-01-07\"\r\n      }]\r\n    }\r\n  ) {\r\n      id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neuer Film mit ungültigen Daten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string');\r",
									"    const props = ['distributor.name', 'name', 'laenge', 'rating', 'preis', 'erscheinungsdatum' ];\r",
									"    props.forEach(prop => pm.expect(message).to.include(prop));\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('create');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  create(\r\n    input: {\r\n      titel: \"?!?!?!\",\r\n      laenge: -1\r\n      rating: 999,\r\n      filmart: KINOFASSUNG,\r\n      preis: -1,\r\n      rabatt: 5,\r\n      streambar: true,\r\n      erscheinungsdatum: \"12345-123-123\",\r\n      schlagwoerter: [\"FEHLER\"],\r\n      distributor: {\r\n        name: \"?!\"\r\n        umsatz: -10\r\n      }\r\n    }\r\n  ) {\r\n      id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Film mit ID 40 aktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit aktualisierter Versionsnummer', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { data } = body;\r",
									"    pm.expect(data.update.version).to.be.a('number').that.is.gte(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  update(\r\n    input: {\r\n      id: \"40\",\r\n      version: 0,\r\n      titel: \"Dark Knight\",\r\n      laenge: 200,\r\n      rating: 5,\r\n      filmart: KINOFASSUNG,\r\n      preis: 89.99,\r\n      rabatt: 0.13,\r\n      streambar: false,\r\n      erscheinungsdatum: \"2007-01-31\",\r\n      schlagwoerter: [\"ACTION\", \"DRAMA\"] \r\n    } \r\n  ) {\r\n      version\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Film mit ID 40 mit ungültigen Daten aktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string');\r",
									"    const props = ['titel', 'laenge', 'preis', 'erscheinungsdatum'];\r",
									"    props.forEach(prop => pm.expect(message).to.include(prop));\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('update');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  update(\r\n    input: {\r\n      id: 40,\r\n      version: 0,\r\n      titel: \"?!?!?!\",\r\n      laenge: -1\r\n      rating: 999,\r\n      filmart: KINOFASSUNG,\r\n      preis: -1,\r\n      rabatt: 0,\r\n      streambar: true,\r\n      erscheinungsdatum: \"12345-123-123\",\r\n      schlagwoerter: [\"ACTION\"]\r\n    }\r\n  ) {\r\n      version\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht-Vorhandenen Film aktualisieren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string').that.includes('999999');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('update');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  update(\r\n    input: {\r\n      id: \"999999\",\r\n      version: 0,\r\n      titel: \"Brücke nach Terabithia\",\r\n      laenge: 98\r\n      rating: 5,\r\n      filmart: ORIGINAL,\r\n      preis: 99.99,\r\n      rabatt: 0.099,\r\n      streambar: false,\r\n      erscheinungsdatum: \"2005-02-01\",\r\n      schlagwoerter: [\"DRAMA\"],\r\n    }\r\n  ) {\r\n      version\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Film mit ID 60 löschen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { data } = body;\r",
									"    pm.expect(data.delete).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  delete(id: \"60\")\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Neuanlegen, Ändern und Löschen mit der GraphQL-Schnittstelle",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: 'https://localhost:3000/graphql',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: JSON.stringify({",
							"        query: `",
							"            mutation {",
							"                login(username: \"admin\", password: \"p\") {",
							"                    access_token",
							"                }",
							"            }",
							"        `",
							"    })",
							"}, (err, res) => {",
							"    pm.collectionVariables.set('TOKEN', res.json().data.login.access_token);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "graphql_url",
			"value": "{{base_url}}/graphql",
			"type": "string"
		},
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		}
	]
}